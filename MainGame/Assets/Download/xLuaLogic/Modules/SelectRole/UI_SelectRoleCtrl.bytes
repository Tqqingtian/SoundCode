UI_SelectRoleCtrl = {}

local this =UI_SelectRoleCtrl;
local currSelectRoleId;--当前选择角色id
local currSelectRoleIndex;--当前选择角色索引
local prefabList = { };--角色列表 这里是角色的预制件
local roleList = { }; --角色列表 这里是角色的信息

function UI_SelectRoleCtrl.OnInit()
    print("添加监听")



end

function UI_SelectRoleCtrl.InitView()

    UI_SelectRoleView.btnEnterGame:GetComponent("UnityEngine.UI.Button").onClick:AddListener(
            function ()
                print("进入游戏")
                print(currSelectRoleId)
                if currSelectRoleId ~=-1 then
                    local proto =  RoleOperation_EnterGameProto.New();
                    proto.RoleId = currSelectRoleId;
                    proto.ChannelId = 0;
                    RoleOperation_EnterGameProto.SendProto(proto);
                else
                    print("没有选择角色");
                end

            end
    )
end

function UI_SelectRoleCtrl.OnOpen(userData)
    GameEntry.Event.SocketEvent:AddEventListener(ProtoCode.RoleOperation_LogOnGameServerReturn,this.OnRoleOperation_LogOnGameServerReturn);
    --删除角色返回
    GameEntry.Event.SocketEvent:AddEventListener(ProtoCode.RoleOperation_DeleteRoleReturn,this.OnRoleOperation_DeleteRoleReturn);

    GameEntry.Event.SocketEvent:AddEventListener(ProtoCode.RoleOperation_EnterGameReturn,this.OnRoleOperation_EnterGameReturn);

    GameEntry.Event.SocketEvent:AddEventListener(ProtoCode.RoleOperation_SelectRoleInfoReturn,this.OnRoleOperation_SelectRoleInfoReturn);
    print("发送获取角色列表的信息")
    local proto =  RoleOperation_LogOnGameServerProto.New();
    RoleOperation_LogOnGameServerProto.SendProto(proto);
    proto.AccountId = CS.UnityEngine.PlayerPrefs.GetString("Account");
    GameEntry.UI:OpenUIForm(UIFormId.Waiting,"正在获取角色...".. proto.AccountId);
end
--接收选择角色的回调信息
function UI_SelectRoleCtrl.OnRoleOperation_LogOnGameServerReturn(buffer)
    local proto = RoleOperation_LogOnGameServerReturnProto.GetProto(buffer);
    roleList = proto.RoleTable;
    print("收到回调信息")
    local roleCenterList = {};
    roleCenterList[1] = UI_SelectRoleView.RoleCenter1;
    roleCenterList[2] = UI_SelectRoleView.RoleCenter2;
    roleCenterList[3] = UI_SelectRoleView.RoleCenter3;
    --设置 游戏服务器 用一次就要出现一次

    if #roleList >0 then
        GameEntry.UI:CloseUIForm(UIFormId.Waiting);
        for i,w in ipairs(roleList) do
            print(i)
            GameEntry.Pool:GameObjectSpawn(PrefabId.CoatardSelect, function (trans)
                prefabList[i] = trans;
                prefabList[i].position = roleCenterList[i].transform.position;
            end
            );
        end
    else
        print("没有角色 请创建")
        GameEntry.UI:CloseUIForm(UIFormId.Waiting);
        GameEntry.UI:CloseUIForm(UIFormId.SelectRole);
        GameEntry.UI:OpenUIForm(UIFormId.CreateRole);
    end
    local conterList = {};
    conterList[1] = UI_SelectRoleView.RoleCenter1:GetComponent("UnityEngine.UI.Button");
    conterList[2] = UI_SelectRoleView.RoleCenter2:GetComponent("UnityEngine.UI.Button");
    conterList[3] = UI_SelectRoleView.RoleCenter3:GetComponent("UnityEngine.UI.Button");

    for i = 1, 3 do
        conterList[i].onClick:AddListener(
                function()
                    if roleList[i] == nil then
                        for key,v in ipairs(prefabList) do
                            GameEntry.Pool:GameObjectDespawn(prefabList[key]);
                            prefabList[key] = nil;
                        end
                        --进入创建角色界面
                        GameEntry.UI:OpenUIForm(UIFormId.CreateRole,i);
                        GameEntry.UI:CloseUIForm(UIFormId.SelectRole);
                        GameEntry.Event.CommonEvent:Dispatch(SysEventId.CreateRoleComplete,i);
                    else
                        currSelectRoleId = roleList[i].RoleId;
                        currSelectRoleIndex = i;
                        print(currSelectRoleId)
                        UI_SelectRoleView.txtRoleInfo.text ="昵称："..roleList[i].RoleNickName..
                                "\n职业："..roleList[i].RoleJob.."\n等级："..roleList[i].RoleLevel..
                                "\nID："..roleList[i].RoleId;
                    end
                end
        );
    end

    UI_SelectRoleView.btnCloseRole.onClick:AddListener(
        function()
            if prefabList[currSelectRoleIndex] ~= nil then
                local deleteProto = RoleOperation_DeleteRoleProto.New();
                deleteProto.RoleId = roleList[currSelectRoleId].RoleId;
                RoleOperation_DeleteRoleProto.SendProto(deleteProto);
                GameEntry.UI:OpenUIForm(UIFormId.Waiting,"删除角色中");
            end
        end
    );
end
--点击删除角色
function UI_SelectRoleCtrl.OnRoleOperation_DeleteRoleReturn(buffer)
    local proto =RoleOperation_DeleteRoleReturnProto.GetProto(buffer);
    if proto.IsSuccess then
        print("删除成功")
        GameEntry.Pool:GameObjectDespawn(prefabList[currSelectRoleId]);
        prefabList[currSelectRoleId] = nil;
        this.roleList[currSelectRoleId] = nil;
        GameEntry.UI:CloseUIForm(UIFormId.Waiting);
    else
        print("删除失败")
        GameEntry.UI:OpenUIForm(UIFormId.PromptWindow,"删除失败");
    end
end

--进入游戏 回调信息
function UI_SelectRoleCtrl.OnRoleOperation_EnterGameReturn(buffer)
    this.enterGameProto = RoleOperation_EnterGameReturnProto.GetProto(buffer);
    print("进入游戏 返回角色信息")
    if prefabList ~= nil then
    else
        print("没有选择角色")
    end
end
--角色返回信息
function UI_SelectRoleCtrl.OnRoleOperation_SelectRoleInfoReturn(buffer)
    this.selectRoleInfoProto = RoleOperation_SelectRoleInfoReturnProto.GetProto(buffer);
    if this.enterGameProto.IsSuccess == true then
        print("角色昵称："..this.selectRoleInfoProto.RoleNickName)
        for key,v in ipairs(prefabList) do
            GameEntry.Pool:GameObjectDespawn(prefabList[key]);
            prefabList[key] = nil;
        end
        GameEntry.Procedure:ChangeState(ProcedureState.EnterGame);
    else
        print("服务器出错")
    end
end

function UI_SelectRoleCtrl.OnClose()

end

function UI_SelectRoleCtrl.OnBeforDestroy()

    GameEntry.Event.SocketEvent:RemoveEventListener(ProtoCode.RoleOperation_LogOnGameServerReturn,this.OnRoleOperation_LogOnGameServerReturn);
    GameEntry.Event.SocketEvent:RemoveEventListener(ProtoCode.RoleOperation_DeleteRoleReturn,this.OnRoleOperation_DeleteRoleReturn);
    GameEntry.Event.SocketEvent:RemoveEventListener(ProtoCode.RoleOperation_EnterGameReturn,this.OnRoleOperation_EnterGameReturn);
end