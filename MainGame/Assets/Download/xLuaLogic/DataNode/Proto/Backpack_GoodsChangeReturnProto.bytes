--服务器返回背包物品更新消息
Backpack_GoodsChangeReturnProto = { ProtoCode = 16003, BackpackItemChangeCount = 0, ItemTable = { } }
local this = Backpack_GoodsChangeReturnProto;

Backpack_GoodsChangeReturnProto.__index = Backpack_GoodsChangeReturnProto;

function Backpack_GoodsChangeReturnProto.New()
    local self = { };
    setmetatable(self, Backpack_GoodsChangeReturnProto);
    return self;
end

function Backpack_GoodsChangeReturnProto.GetProtoName()
    return "Backpack_GoodsChangeReturn";
end


--定义更改项
Item = { BackpackId = 0, ChangeType = 0, GoodsType = 0, GoodsId = 0, GoodsCount = 0, GoodsServerId = 0 }
Item.__index = Item;
function Item.New()
    local self = { };
    setmetatable(self, Item);
    return self;
end


--发送协议
function Backpack_GoodsChangeReturnProto.SendProto(proto, isChild)

    local ms = nil;

    if (isChild == nil or isChild == false) then
        ms = CS.TQ.GameEntry.Socket.SocketSendMS;
        ms:SetLength(0);
        ms:WriteUShort(proto.ProtoCode);
    else
        ms = CS.TQ.GameEntry.Lua:DequeueMemoryStream();
        ms.SetLength(0);
    end

    ms:WriteInt(proto.BackpackItemChangeCount);
    for i = 1, proto.BackpackItemChangeCount, 1 do
        local item = proto.ItemTable[i];
        ms:WriteInt(item.BackpackId);
        ms:WriteByte(item.ChangeType);
        ms:WriteByte(item.GoodsType);
        ms:WriteInt(item.GoodsId);
        ms:WriteInt(item.GoodsCount);
        ms:WriteInt(item.GoodsServerId);
    end

    if (isChild == nil or isChild == false) then
        if (CS.TQ.GameEntry.Lua.DebugLogProto == true) then
            print(string.format("<color=#000000>发送消息:</color><color=#000000>%s %s</color>", this.GetProtoName(), proto.ProtoCode));
            print(string.format("<color=#000000>==>>%s</color>", json.encode(proto)));
        end

        CS.TQ.GameEntry.Socket:SendMsg(ms:ToArray());
    else
        local retBuffer = ms:ToArray();
        CS.TQ.GameEntry.Lua:EnqueueMemoryStream(ms);
        return retBuffer;
    end
end


--解析协议
function Backpack_GoodsChangeReturnProto.GetProto(buffer, isChild)

    local proto = Backpack_GoodsChangeReturnProto.New(); --实例化一个协议对象
    local ms = nil;
    if (isChild == nil or isChild == false) then
        ms = CS.TQ.GameEntry.Lua:LoadSocketReceiveMS(buffer);
    else
        ms = CS.TQ.GameEntry.Lua:DequeueMemoryStreamAndLoadBuffer(buffer);
    end

    proto.BackpackItemChangeCount = ms:ReadInt();
	proto.ItemTable = {};
    for i = 1, proto.BackpackItemChangeCount, 1 do
        local _Item = Item.New();
        _Item.BackpackId = ms:ReadInt();
        _Item.ChangeType = ms:ReadByte();
        _Item.GoodsType = ms:ReadByte();
        _Item.GoodsId = ms:ReadInt();
        _Item.GoodsCount = ms:ReadInt();
        _Item.GoodsServerId = ms:ReadInt();
        proto.ItemTable[#proto.ItemTable+1] = _Item;
    end

    if (isChild == nil or isChild == false) then
        if (CS.TQ.GameEntry.Lua.DebugLogProto == true) then
            print(string.format("<color=#000000>接收消息:</color><color=#000000>%s %s</color>", this.GetProtoName(), proto.ProtoCode));
            print(string.format("<color=#000000>==>>%s</color>", json.encode(proto)));
        end
    end

    return proto;
end