--服务器返回查询背包项消息
Backpack_SearchReturnProto = { ProtoCode = 16005, BackpackItemCount = 0, ItemTable = { } }
local this = Backpack_SearchReturnProto;

Backpack_SearchReturnProto.__index = Backpack_SearchReturnProto;

function Backpack_SearchReturnProto.New()
    local self = { };
    setmetatable(self, Backpack_SearchReturnProto);
    return self;
end

function Backpack_SearchReturnProto.GetProtoName()
    return "Backpack_SearchReturn";
end


--定义背包项
Item = { BackpackItemId = 0, GoodsType = 0, GoodsId = 0, GoodsServerId = 0, GoodsOverlayCount = 0 }
Item.__index = Item;
function Item.New()
    local self = { };
    setmetatable(self, Item);
    return self;
end


--发送协议
function Backpack_SearchReturnProto.SendProto(proto, isChild)

    local ms = nil;

    if (isChild == nil or isChild == false) then
        ms = CS.TQ.GameEntry.Socket.SocketSendMS;
        ms:SetLength(0);
        ms:WriteUShort(proto.ProtoCode);
    else
        ms = CS.TQ.GameEntry.Lua:DequeueMemoryStream();
        ms.SetLength(0);
    end

    ms:WriteInt(proto.BackpackItemCount);
    for i = 1, proto.BackpackItemCount, 1 do
        local item = proto.ItemTable[i];
        ms:WriteInt(item.BackpackItemId);
        ms:WriteByte(item.GoodsType);
        ms:WriteInt(item.GoodsId);
        ms:WriteInt(item.GoodsServerId);
        ms:WriteInt(item.GoodsOverlayCount);
    end

    if (isChild == nil or isChild == false) then
        if (CS.TQ.GameEntry.Lua.DebugLogProto == true) then
            print(string.format("<color=#000000>发送消息:</color><color=#000000>%s %s</color>", this.GetProtoName(), proto.ProtoCode));
            print(string.format("<color=#000000>==>>%s</color>", json.encode(proto)));
        end

        CS.TQ.GameEntry.Socket:SendMsg(ms:ToArray());
    else
        local retBuffer = ms:ToArray();
        CS.TQ.GameEntry.Lua:EnqueueMemoryStream(ms);
        return retBuffer;
    end
end


--解析协议
function Backpack_SearchReturnProto.GetProto(buffer, isChild)

    local proto = Backpack_SearchReturnProto.New(); --实例化一个协议对象
    local ms = nil;
    if (isChild == nil or isChild == false) then
        ms = CS.TQ.GameEntry.Lua:LoadSocketReceiveMS(buffer);
    else
        ms = CS.TQ.GameEntry.Lua:DequeueMemoryStreamAndLoadBuffer(buffer);
    end

    proto.BackpackItemCount = ms:ReadInt();
	proto.ItemTable = {};
    for i = 1, proto.BackpackItemCount, 1 do
        local _Item = Item.New();
        _Item.BackpackItemId = ms:ReadInt();
        _Item.GoodsType = ms:ReadByte();
        _Item.GoodsId = ms:ReadInt();
        _Item.GoodsServerId = ms:ReadInt();
        _Item.GoodsOverlayCount = ms:ReadInt();
        proto.ItemTable[#proto.ItemTable+1] = _Item;
    end

    if (isChild == nil or isChild == false) then
        if (CS.TQ.GameEntry.Lua.DebugLogProto == true) then
            print(string.format("<color=#000000>接收消息:</color><color=#000000>%s %s</color>", this.GetProtoName(), proto.ProtoCode));
            print(string.format("<color=#000000>==>>%s</color>", json.encode(proto)));
        end
    end

    return proto;
end