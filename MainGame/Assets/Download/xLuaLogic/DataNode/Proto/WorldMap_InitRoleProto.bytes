--服务器广播当前场景角色
WorldMap_InitRoleProto = { ProtoCode = 13007, RoleCount = 0, ItemTable = { } }
local this = WorldMap_InitRoleProto;

WorldMap_InitRoleProto.__index = WorldMap_InitRoleProto;

function WorldMap_InitRoleProto.New()
    local self = { };
    setmetatable(self, WorldMap_InitRoleProto);
    return self;
end

function WorldMap_InitRoleProto.GetProtoName()
    return "WorldMap_InitRole";
end


--定义角色列表
Item = { RoleId = 0, RoleNickName = "", RoleLevel = 0, RoleMaxHP = 0, RoleCurrHP = 0, RoleMaxMP = 0, RoleCurrMP = 0, RoleJobId = 0, RolePosX = 0, RolePosY = 0, RolePosZ = 0, RoleYAngle = 0 }
Item.__index = Item;
function Item.New()
    local self = { };
    setmetatable(self, Item);
    return self;
end


--发送协议
function WorldMap_InitRoleProto.SendProto(proto, isChild)

    local ms = nil;

    if (isChild == nil or isChild == false) then
        ms = CS.TQ.GameEntry.Socket.SocketSendMS;
        ms:SetLength(0);
        ms:WriteUShort(proto.ProtoCode);
    else
        ms = CS.TQ.GameEntry.Lua:DequeueMemoryStream();
        ms.SetLength(0);
    end

    ms:WriteInt(proto.RoleCount);
    for i = 1, proto.RoleCount, 1 do
        local item = proto.ItemTable[i];
        ms:WriteInt(item.RoleId);
        ms:WriteUTF8String(item.RoleNickName);
        ms:WriteInt(item.RoleLevel);
        ms:WriteInt(item.RoleMaxHP);
        ms:WriteInt(item.RoleCurrHP);
        ms:WriteInt(item.RoleMaxMP);
        ms:WriteInt(item.RoleCurrMP);
        ms:WriteInt(item.RoleJobId);
        ms:WriteFloat(item.RolePosX);
        ms:WriteFloat(item.RolePosY);
        ms:WriteFloat(item.RolePosZ);
        ms:WriteFloat(item.RoleYAngle);
    end

    if (isChild == nil or isChild == false) then
        if (CS.TQ.GameEntry.Lua.DebugLogProto == true) then
            print(string.format("<color=#000000>发送消息:</color><color=#000000>%s %s</color>", this.GetProtoName(), proto.ProtoCode));
            print(string.format("<color=#000000>==>>%s</color>", json.encode(proto)));
        end

        CS.TQ.GameEntry.Socket:SendMsg(ms:ToArray());
    else
        local retBuffer = ms:ToArray();
        CS.TQ.GameEntry.Lua:EnqueueMemoryStream(ms);
        return retBuffer;
    end
end


--解析协议
function WorldMap_InitRoleProto.GetProto(buffer, isChild)

    local proto = WorldMap_InitRoleProto.New(); --实例化一个协议对象
    local ms = nil;
    if (isChild == nil or isChild == false) then
        ms = CS.TQ.GameEntry.Lua:LoadSocketReceiveMS(buffer);
    else
        ms = CS.TQ.GameEntry.Lua:DequeueMemoryStreamAndLoadBuffer(buffer);
    end

    proto.RoleCount = ms:ReadInt();
	proto.ItemTable = {};
    for i = 1, proto.RoleCount, 1 do
        local _Item = Item.New();
        _Item.RoleId = ms:ReadInt();
        _Item.RoleNickName = ms:ReadUTF8String();
        _Item.RoleLevel = ms:ReadInt();
        _Item.RoleMaxHP = ms:ReadInt();
        _Item.RoleCurrHP = ms:ReadInt();
        _Item.RoleMaxMP = ms:ReadInt();
        _Item.RoleCurrMP = ms:ReadInt();
        _Item.RoleJobId = ms:ReadInt();
        _Item.RolePosX = ms:ReadFloat();
        _Item.RolePosY = ms:ReadFloat();
        _Item.RolePosZ = ms:ReadFloat();
        _Item.RoleYAngle = ms:ReadFloat();
        proto.ItemTable[#proto.ItemTable+1] = _Item;
    end

    if (isChild == nil or isChild == false) then
        if (CS.TQ.GameEntry.Lua.DebugLogProto == true) then
            print(string.format("<color=#000000>接收消息:</color><color=#000000>%s %s</color>", this.GetProtoName(), proto.ProtoCode));
            print(string.format("<color=#000000>==>>%s</color>", json.encode(proto)));
        end
    end

    return proto;
end